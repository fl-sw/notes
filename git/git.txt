
-----------------------------------------------------------------------
配置
-----------------------------------------------------------------------
设置用户信息：
git config --global user.name 'flsw'
git config --global user.email 'fl_sw@foxmail.com'

git config --local ... 		//只对某个仓库有效
git config --global ... 		//对当前用户所有仓库有效
git config --system ...		 //system对系统所有登录的用户有效

git config --list  //可以显示当前的设置
git config --list --local  //
git config --list --global
git config --list --system

*在global和local中同时设置用户信息，且不相同时，local的优先级大于global

-----------------------------------------------------------------------
建仓库
-----------------------------------------------------------------------
1.把已经存在的项目纳入git管理
cd 项目所在的文件夹
git init

2.新建一个项目并且直接用git管理
cd 某个文件夹
git init 项目名（也就是文件夹名）
cd （项目名也就是文件夹名 	）		//进去后有个.git文件


-----------------------------------------------------------------------
添加文件并且提交
-----------------------------------------------------------------------
PS D:\myWorkSpace\frontWS\testGitFloder2> cp ..\testGitFloder\test.html .
运行上面的语句（拷贝一个文件到当前文件夹内）后：
$$ git commit -m'add test.html'  //提交命令，-m后面是注释提交原因
运行上面的提交命令后报错"Untracked files:..."。是因为还没有把新拷贝来的文件交给git管理，所以要执行下面这句条指令：
$$ git add test.html
再查看一下当前状态：
$$ git status
报出"Changes to be committed:
  	(use "git rm --cached <file>..." to unstage)
        new file:   test.html"
说明刚才的test.html已经移动到暂存区了，再次执行提交命令：
$$ git commit -m'add test.html'
提交成功。再查看一下日志：
$$ git log
打印出了如下信息：
。。
commit 7eeee29b61d3ab70d81c3e35b8e71b4b7e78b613 (HEAD -> master)
Author: flsw <fl_sw@foxmail.com>
Date:   Sun Mar 14 23:46:39 2021 +0900

    add test.html
。。

流畅的步骤是这样的：（先往暂存区添加文件，再提交）
$$ git add filenameA filenameB
$$ git commit
也可以这样：
$$ git add -u  //-u就是添加被git识别出的所有的被修改的文件


-----------------------------------------------------------------------
给文件重命名
-----------------------------------------------------------------------
方式一：
1.在文件夹里修改文件名：（readme.md->readme）
2.添加readme:git add readme
3.删除旧文件：git rm readme.md
方式二：
$$ git mv read.md readme

重命名之后还要再提交一次

-----------------------------------------------------------------------
看版本历史
-----------------------------------------------------------------------
$$ git log --online    	//简洁的看，只看一行
$$ git log -n4			//只看最近的4条
$$ git log -n2 --oneline	//组合起来简洁的看两行记录（参数前后顺序不影响）
$$ git log --oneline --all -n4 --graph  //--all是查看所有分支；--graph是图形化的查看
$$ git log --all --graph		//看所有分支的信息

-----------------------------------------------------------------------
图形化界面
-----------------------------------------------------------------------
$$ gitk		//用这个命令会进入图形化界面
//Patch：在左边显示文件中增加了的内容，变更了的内容
//Tree:  在左边显示文件的全部

//Auther / Commiter
//作者和提交人：将其他分支的东西提交到自己的分支，作者仍然是别人，提交人是自己


-----------------------------------------------------------------------
.git文件夹
-----------------------------------------------------------------------
$$ git checkout master  //切换到master分支上
HEAD 		中存储了工作在哪个分支上
config 	中记录了配置信息，比如用户名和用户Email
		git config --local user.name//只看用户名
refs		文件夹中有heads和tags文件夹，heads中记录分支信息，tags中记录标签/里程碑（比如1.0版本的标签）
		heads又存放分支的名字，分支文件中记录着分支的id（hash值）；tags当中也存着一个hash值，这个值是commit id;
objects	里头放一些文件夹，pack，info；松散的文件比较多的话，会打包并放入pack；

git中对象的类型：blob,tree,commit ...
git中只要文件的内容相同，那么它就是唯一的一个blob (git的文件和文件名没关系，识别的是文件内容)



-----------------------------------------------------------------------
git对象彼此关系 blob,tree,commit 
-----------------------------------------------------------------------
 

每一次执行commit都会创建一个commit对象出来。 这个commit对象中存有一棵树A，这个树中存储了当前commit时的所有文件的快照（也就是一个版本）。
树A代表了一个文件夹，树A文件夹下面的文件夹也是tree，文件则是blob（blob和文件名无关，和内容有关，内容不一样才是不一样的blob）

$$ git branch -av	//看当前在哪个branch里面
$$ git cat-file -p hashid		//看文件内容
$$ git cat-file -t hashid		//看对象类型

$$ git branch			//看有哪些分支
$$ git checkout 分支名		//切换分支
$$ git diff HEAD HEAD^		//比较HEAD和HEAD的父亲，看有什么差异
$$ git diff HEAD HEAD~1	//和上面一句一样
$$ git diff HEAD HEAD^^  =  git diff HEAD HEAD~2

$$ git checkout -b fix_readme2 fix_readme		//基于分支fix_readme创建fix_readme2分支，并切换到fix_readme2分支上；不仅可以基于fix_readme，这里的fix_readme还可以换成一个commit，基于这个commit来创建分支


$$ cat .git/HEAD		//看HEAD指向什么
$$ cat .git/refs/heads/fix_readme2			//看当前分支指向哪个commit

-----------------------------------------------------------------------
删除分支
-----------------------------------------------------------------------
$$ git branch		//看分支
$$ git branch -av	//看分支

$$ git branch -d 分支名	//删除分支
$$ git branch -D 分支名	//删除分支


-----------------------------------------------------------------------
对commit的message进行变更
-----------------------------------------------------------------------
$$ git commit --amend		//对最近一次的 commit的message进行变更

git mv readme readme.md		//修改文件名
git reset HEAD readme.md		//把变化加入暂存区？加入了工作区

那如果要改变以前任意一个commit的message呢？
git rebase -i commitID（父亲）		//这里的commitID应该是要修改的commit的父亲的commitID


-----------------------------------------------------------------------
对commit进行整理（连续的）
-----------------------------------------------------------------------
git rebase -i commitID		//会进去交互界面，然后按照手册进行

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Commands:
#  p, pick = use commit
#  r, reword（改写） = use commit, but edit the commit message
#  e, edit = use commit, but stop for amending（修正）
#  s, squash（压缩，压扁） = use commit, but meld（融合） into（融入） previous commit
#  f, fixup = like "squash", but discard（丢弃） this commit's log message
#  x, exec = run command (the rest of（其余的） the line) using shell
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted（流产，中止）.
#
# Note that empty commits are commented out（注释掉）
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

-----------------------------------------------------------------------
暂存区和HEAD如何作比较
-----------------------------------------------------------------------
git diff --cached		//对暂存区的文件和HEAD的内容做比较

-----------------------------------------------------------------------
暂存区和工作区如何作比较
-----------------------------------------------------------------------
git diff  			//对工作区的文件和暂存区的内容做比较
git diff --filename 	//对工作区的某个文件和暂存区的内容做比较

-----------------------------------------------------------------------
把暂存区的内容变回仓库中的内容
-----------------------------------------------------------------------
git reset HEAD			//退回所有变更，使暂存区跟HEAD一致
git reset HEAD -- filename		//退回指定的文件，使暂存区跟HEAD一致（不加--也可以）
-----------------------------------------------------------------------
把工作区的内容变回暂存区的内容
-----------------------------------------------------------------------
git checkout -- filename		//把工作区的内容扔掉，变成暂存区的内容（不加--也可以）

（变暂存区的内容用reset，变工作区的内容用checkout）
（变更时：[HEAD]---reset--->[Unstage]---checkout--->[Work]）


-----------------------------------------------------------------------
回到某个commit的状态
-----------------------------------------------------------------------
git reset --hard commitID		//回到某个commit的状态，改变头指针的指向


-----------------------------------------------------------------------
对比两个分支/commit/版本
-----------------------------------------------------------------------
git diff 分支1 分支2			//对比两个分支，显示所有的不同
git diff 分支1 分支2 -- filename		//指定某个文件
git diff 提交1 提交2			//对比提交，显示所有不同
git diff 提交1 提交2 -- filename		//指定某个文件


-----------------------------------------------------------------------
删除文件
-----------------------------------------------------------------------
git rm filename			//在工作区和暂存区删除文件
git reset --hard HEAD		//删除了，恢复


-----------------------------------------------------------------------
stash（n.隐藏物，藏身处；v.隐藏，藏匿）
-----------------------------------------------------------------------

git stash		//把所有未提交的修改（包括暂存的和非暂存的）都保存起来，用于后续恢复当前工作目录。
git stash save "message"		//可以用Sava加一个message，记录一下版本
git stash list	//查看现有的stash
git stash apply	//将缓存堆栈中的stash多次应用到工作目录中，但并不删除stash拷贝。可以通过名字指定使用哪个stash，默认使用最近的一个
git stash pop		//将缓存堆栈中的第一个stash删除，并将对应修改应用到当前的工作目录下。
git stash drop stashName		//移除stash
git stash branch		//创建一个新分支

(pop和apply的区别：apply会把stash中的内容保留，pop完了之后会把stash中的内容给删除)

综合下网上的介绍和资料，git stash（git储藏）可用于以下情形：
*发现有一个类是多余的，想删掉它又担心以后需要查看它的代码，想保存它但又不想增加一个脏的提交。这时就可以考虑git stash。
*使用git的时候，我们往往使用分支（branch）解决任务切换问题，例如，我们往往会建一个自己的分支去修改和调试代码, 如果别人或者自己发现原有的分支上有个不得不修改的bug，我们往往会把完成一半的代码commit提交到本地仓库，然后切换分支去修改bug，改好之后再切换回来。这样的话往往log上会有大量不必要的记录。其实如果我们不想提交完成一半或者不完善的代码，但是却不得不去修改一个紧急Bug，那么使用git stash就可以将你当前未提交到本地（和服务器）的代码推入到Git的栈中，这时候你的工作区间和上一次提交的内容是完全一样的，所以你可以放心的修Bug，等到修完Bug，提交到服务器上后，再使用git stash apply将以前一半的工作应用回来。
*经常有这样的事情发生，当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。解决这个问题的办法就是git stash命令。储藏(stash)可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。


-----------------------------------------------------------------------
.gitignore
-----------------------------------------------------------------------
doc/
*.txt

-----------------------------------------------------------------------
备份
-----------------------------------------------------------------------
 

哑协议传输进度不可见，智能协议可见；传输速度智能协议比哑协议快（有打包和压缩）。

git clone --bare ../temp_git_test/.git backup1.git		//--bare是不带工作区
git clone --bare file:///home/admin/temp_git_test/.git backup2.git		//加了[file://]之后就是智能协议，会显示传输进度
git remote add backup1 file:////home/admin/backup_git_test/backup1.git		//备份到远端
git remote -v		//看远端的仓库


-----------------------------------------------------------------------
公私钥
-----------------------------------------------------------------------

ssh-keygen -t ed25519 -C "fl_sw@foxmail.com"
ls ~/.ssh -al		//在root名下，不在admin下

 C:\Users\30885/.ssh/id_ed25519.

-----------------------------------------------------------------------
github
-----------------------------------------------------------------------

 

pull=fetch+merge

git remote add <主机名> <路径>		//添加一个远程主机
git remote add github git@github.com:fl-sw/git_test.git
git push github --all		//把本地仓库push到远端
git fetch github master		//把远端分支拉到本地来
git branch -av			//查看所有分支
git merge fix_readme		//合并当前分支和另一个分支
git push github --all		//把本地仓库push到远端


图解git
https://marklodato.github.io/visual-git-guide/index-zh-cn.html
















