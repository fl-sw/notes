重构与模式
重构
巴比龙

1.基类虚析构函数


1.template method 模板模式
定义一个操作中算法的骨架，而将一些算法中的一些子步骤延迟到子类中（在c++中，延迟的意思就是定义一个虚函数，然后由子类去实现这个函数），
这个template Method可以使得子类在不改变算法(这里的算法是确定可复用的)的情况下，重新定义这个算法中的一些步骤。

晚绑定：调用一个还没有实现的方法，这个方法会由后来的人定义。例如->调用一个虚函数，这个虚函数被后来的子类重写
条件：这个算法的骨架必须是稳定的，要不然就不要用这个设计模式了
扩展：子类继承了父类，然后对父类的虚函数进行重写，就叫扩展
其中的虚函数，一般作为一个子步骤被调用，单独调用是没有意义的，所以不需要public公开，而设为protected


2.strategy 策略模式
定义一系列算法，把他们一个个的封装起来,并且使他们可以相互替换。

strategy及其子类提供了一系列可重用的算法，使得类型在运行时方便的在各个算法之间切换。（传给多态的对象，使用不同的算法）
strategy提供了if else之外的另一种选择。if else语句是strategy出现的特征，如果if else是不稳定的是以后会变化的，就可以考虑这个设计模式。
