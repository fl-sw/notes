每个进程都有一个工作目录 (working directory，有时称为当前工作目录 (current working directory ) )。所有相对路径名都从工作目录开始解释。进程可以用chdir函数更改其工作目录。
函数o p e n、r e a d、w r i t e、l s e e k以及c l o s e提供了不用缓存的I / O。
两个常数S T D I N _ F I L E N O和S T D O U T _ F I L E N O定义在< u n i s t d . h >头文件中，它们指定了标准输入和标准输出的文件描述符。它们的典型值是 0和1，
r e a d函数返回读得的字节数，此值用作要写的字节数。当到达文件的尾端时， r e a d返回0，程序停止执行。如果发生了一个读错误，r e a d返回－1。出错时大多数系统函数返回－1。
程序（p r o g r a m）是存放在磁盘文件中的可执行文件。使用 6个e x e c函数中的一个由内核将程序读入存储器，并使其执行。
char *fgets(char *buf, int bufsize, FILE *stream);
参数
*buf: 字符型指针，指向用来存储所得数据的地址。
bufsize: 整型数据，指明存储数据的大小。
*stream: 文件结构体指针，将要读取的文件流。
返回值
成功，则返回第一个参数buf；
在读字符时遇到end-of-file，则eof指示器被设置，如果还没读入任何字符就遇到这种情况，则buf保持原来的内容，返回NULL；如果发生读入错误，error指示器被设置，返回NULL，buf的值可能被改变。
文件结束字符（通常是 C t r l - D）因为f g e t s返回的每一行都以新行符终止，后随一个n u l l字节，故用标准C函数s t r l e n计算此字符串的长度，然后用一个 n u l l字节替换新行符。这一操作的目的是因为 e x e c l p函数要求的是以n u l l结束的参数，而不是以新行符结束的参数。
以_ t结尾的这些数据类型被称为原始系统数据类型。
#include <string.h> 	char *strerror(int e rr n u m) ;       返回：指向消息字符串的指针.	此函数将e rr n u m(它通常就是e r r n o值) 映射为一个出错信息字符   	串，并且返回此字符串的指针。
调用g e t u i d和g e t g i d以返回用户I D和组I D。
 进程如何处理信号有三种选择：
	(1) 忽略该信号。有些信号表示硬件异常，例如，除以0或访问进程地址	空间以外的单元等，因为这些异常产生的后果不确定，所以不推荐使用	这种处理方式。
	(2) 按系统默认方式处理。对于0除，系统默认方式是终止该进程。
	(3) 提供一个函数，信号发生时则调用该函数。使用这种方式，我们将能	知道什么时候产生了信号，并按所希望的方式处理它。
12.	1 9 7 0年1月1日0 0 : 0 0 : 0 0以来国际标准时间（U T C）所经过的秒	数累计值（早期的手册称U T C为格林尼治标准时间）。

13.<od -c filename>可以查看文件内容

14.<du -s>看文件大小

15.<time ./a.out>显示执行时间

	